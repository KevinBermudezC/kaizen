// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  habits        Habit[]
  routines      Routine[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

/// Categorías de hábitos (ej. Salud, Estudio, Trabajo, Fitness, Mindfulness…)
model Category {
  id        String   @id @default(cuid())
  name      String
  color     String?  // opcional, para diferenciar visualmente
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  habits    Habit[]
  
  @@map("categories")
}

/// Hábitos creados por el usuario
model Habit {
  id          String      @id @default(cuid())
  title       String
  description String?
  frequency   String      // daily, weekly, custom
  targetDays  Int?        // Para hábitos semanales (ej: 3 días por semana)
  startDate   DateTime    @default(now())
  isArchived  Boolean     @default(false)
  reminderTime DateTime?  // Hora del recordatorio
  streak      Int         @default(0) // Racha actual
  longestStreak Int       @default(0) // Mejor racha
  notes       String?     // Notas del usuario

  userId      String
  categoryId  String?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id])
  completions Completion[]
  routineHabits RoutineHabit[]
  
  @@map("habits")
}

/// Registro de cumplimiento de un hábito
model Completion {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  status    Boolean  @default(true) // true si se completó, false si se falló
  notes     String?  // Notas del día
  mood      Int?     // 1-5 escala de ánimo
  difficulty Int?    // 1-5 escala de dificultad
  habitId   String

  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  
  @@map("completions")
}

/// Rutinas → grupos de hábitos (ej: "Mañana productiva" con 3 hábitos dentro)
model Routine {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  habits    RoutineHabit[]
  
  @@map("routines")
}

/// Tabla intermedia rutina-hábito
model RoutineHabit {
  id        String @id @default(cuid())
  routineId String
  habitId   String

  routine Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  habit   Habit   @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([routineId, habitId])
  @@map("routine_habits")
}
